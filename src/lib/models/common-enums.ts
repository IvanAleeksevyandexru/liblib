// транслитерация текста / контента
export enum Translation {
  NONE = 'none', // отсутствует
  APP = 'app', // использовать переводы приложения-клиента
  LIB = 'lib' // использовать встроенные переводы из ассетов либы
}

// показ валидации на компоненте (если есть ошибка)
export enum ValidationShowOn {
  IMMEDIATE = 'immediate', // немедленно
  NEVER = 'never',  // не показывать
  TOUCHED = 'touched',  // показывать если touched
  TOUCHED_UNFOCUSED = 'touched-unfocused' // показывать если touched и не редактируется в настоящий момент
}

// способ показа валидации или информации для ValidationDetailed компонент
export enum MessagePosition {
  ABOVE = 'above',   // над компонентом отдельным блоком
  BELOW = 'below',   // под компонентом отдельным блоком
  INSIDE = 'inside', // внутри контрола в виде лампочки по нажатию на которую можно просмотреть сообщение
  NOWHERE = 'nowhere'// нигде
}

// выравнивание выпадашек если не совпадает с шириной инпута
export enum Align {
  LEFT = 'left',  // по левой границе инпута
  RIGHT = 'right', // по правой границе инпута
  ADJUST = 'adjust' // адаптировать контент, растянуть/сжать
}

// описывает возможное положение "разрыва" (разделителя, вертикальной или горизонтальной черты)
export enum LineBreak {
  BEFORE = 'before', // разделитель должен быть выведен перед итемом, итем является реальным, можно выбрать
  AFTER = 'after', // разделитель должен быть выведен после итема, итем является реальным, можно выбрать
  SELF = 'self', // сам итем является сепаратором, итем-пустышка, dummy, выбрать нельзя
  BOTH = 'both' // сверху и снизу, before + after
}

// направление диалогов по знаку вопроса
export enum TipDirection {
  LEFT = 'left',
  RIGHT = 'right',
  TOP = 'top', // вверх и вправо
  BOTTOM = 'bottom', // вниз вправо
  TOP_LEFT = 'top-left', // вверх и влево, над полем чтобы не уходить за край под моб
  BOTTOM_LEFT = 'bottom-left' // то же, только вниз
}

// показ значения-массива. списка выбранных элементов в ограниченном по ширине контроле
export enum MultipleItemsLayout {
  SHRINK = 'shrink', // сжимать итемы с ellipsis (tip по наведению) когда доступная ширина закончится
  WRAP = 'wrap', // не сжимать, переносить на следующую строку с изменением высоты контейнера
  OVERFLOW = 'overflow', // не сжимать и не переносить элементы, разрешить им переполнить контрол и уйти за его правую границу
  PANEL = 'panel', // отображать в формате разворачивающейся панели с заголовком содержащим количество
  TEXT = 'text', // отображать только текст с информацией о количестве без прямой возможности просмотра/удаления
  CUSTOM = 'custom' // использовать кастомный вывод (форматтер)
}

// способ исправления некорректной введенной руками даты
export enum BrokenDateFixStrategy {
  NONE = 'none',  // игнорировать, попытаться закоммитить с ошибкой
  RESET = 'reset', // сбросить
  RESTORE = 'restore' // восстановить предыдущее
}

// родное свойство autocomplete input элемента (расширенное)
export enum InputAutocomplete {
  OFF = 'off',
  ON = 'on',
  PASSWORD = 'password',
  ONE_TIME_CODE = 'one-time-code'
}

// очистка значения от плейсхолдеров и фиксированных символов маски
export enum RemoveMaskSymbols {
  SKIP = 'skip', // оставлять, ничего не убирать
  TRIM_END = 'trim-end', // убирать с конца плейсхолдеры и символы маски
  PLACEHOLDERS = 'placeholders' // убирать везде плейсхолдеры, не трогать фиксированные символы маски
}

// способ исправления неконсистентного текста (не соответствующего модели) при требовании консистентности
export enum InconsistentReaction {
  IGNORE = 'ignore', // игнорировать
  RESET = 'reset', // сбросить итем
  RESTORE = 'restore' // восстановить текст в соответствии с моделью
}

// способ упорядочивания исходящих значений поиска если новый запрос сформирован пока предыдущий еще не завершен
export enum SearchSyncControl {
  BLOCK = 'block', // запрещать пользовательский ввод на время поиска, синхронизация не потребуется
  PARALLEL = 'parallel', // синхронизация отсутствует, исходящий поиск может запускаться когда поиск в процессе
  QUEUE = 'queue', // использовать механизм очереди на уровне компонента
  LAST_STANDING = 'last-standing' // помнить только один последний отложенный элемент, не проигрывая всю очередь
}

// источник состояния модели когда допускается управление и через сервис и локально
export enum ModelControl {
  LOCAL = 'local', // локальное инпут свойство
  SERVICE = 'service' // глобальный сервис
}





